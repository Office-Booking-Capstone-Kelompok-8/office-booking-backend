openapi: 3.0.3
info:
  title: OfficeZone API
  description: OfficeZone office space booking API
  version: 1.0.0

servers:
  - url: 'https://dev.fortyfourvisual.com/v1'
    description: Development server
  - url: 'https://staging.fortyfourvisual.com/v1'
    description: Staging server
  - url: 'https://api.fortyfourvisual.com/v1'
    description: Production server
  - url: '{path}'
    variables:
      path:
        default: 'dev.fortyfourvisual.com/v1'
        description: Development server

paths:
  /ping:
    get:
      summary: Ping
      description: Ping the server
      operationId: ping
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Pong
  /auth/register:
    post:
      summary: Register a new user
      operationId: registerUser
      tags:
        - Auth
      requestBody:
        description: User registration details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: oz@mail.com
                password:
                  type: string
                  format: password
                  example: password
                phone:
                  type: string
                  example: +1 234 567 890
      responses:
        201:
          description: Successfully registering a new user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: user created successfully
                  data:
                    type: object
                    properties:
                      uid:
                        type: string
                        example: 5f7f9c9c-8b9a-4b9c-9c9c-8b9a4b9c9c9c
        409:
          $ref: '#/components/responses/EmailAlreadyUsed'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              examples:
                InvalidRequestBody:
                  $ref: '#/components/examples/InvalidRequestBody'
                InvalidEmail:
                  $ref: '#/components/examples/InvalidEmail'
                InvalidPassword:
                  $ref: '#/components/examples/InvalidPassword'
        500:
          $ref: '#/components/responses/InternalServerError'

  /auth/login:
    post:
      summary: Login
      operationId: login
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: oz@mail.com
                password:
                  type: string
                  format: password
                  example: password
        required: true
      responses:
        200:
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Login successful
                  data:
                    type: object
                    properties:
                      role:
                        type: integer
                        example: 1
                      access_token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySUQiOiI3MTg1OGNmMS1lNDhkLTQzYmQtOGU0YS1jZDNkNGE1YjIwMDMiLCJyb2xlIjoxLCJleHAiOjB9.G0PITHn6gz-fu6kqrZYwBc_bAca1YCZvMNGFvKHDytk
                      refresh_token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySUQiOiI3MTg1OGNmMS1lNDhkLTQzYmQtOGU0YS1jZDNkNGE1YjIwMDMiLCJyb2xlIjoxLCJleHAiOjB9.G0PITHn6gz-fu6kqrZYwBc_bAca1YCZvMNGFvKHDytk
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: invalid email or password
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              examples:
                InvalidRequestBody:
                  $ref: '#/components/examples/InvalidRequestBody'
                InvalidEmail:
                  $ref: '#/components/examples/InvalidEmail'
        500:
          $ref: '#/components/responses/InternalServerError'

  /auth/logout:
    post:
      summary: Logout
      operationId: logout
      tags:
        - Auth
      security:
        - refresh_token: []
      responses:
        200:
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logout successful
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
        500:
          $ref: '#/components/responses/InternalServerError'

  /auth/refresh:
    post:
      summary: Refresh access token
      operationId: refreshAccessToken
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2NzA0NTgwNDksImp0aSI6IjBiNGFmZmY5LTg0NzAtNDkxNi04NDEyLTllNjY3M2RhMmU0NyIsInVpZCI6IjY4ZjA2M2M0LTBjZGItNDJlNi1hNjFiLTg4NTg3MzkwMmJmZCIsImNhdCI6InJlZnJlc2gifQ.X0a_rKDJzQVSbgtN2BahhhVgJThemckCuImo6Axp0vg
        required: true
      responses:
        200:
          description: Successfully refreshed access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Refresh successful
                  data:
                    type: object
                    properties:
                      access_token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySUQiOiI3MTg1OGNmMS1lNDhkLTQzYmQtOGU0YS1jZDNkNGE1YjIwMDMiLCJyb2xlIjoxLCJleHAiOjB9.G0PITHn6gz-fu6kqrZYwBc_bAca1YCZvMNGFvKHDytk
                      refresh_token:
                        type: string
                        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySUQiOiI3MTg1OGNmMS1lNDhkLTQzYmQtOGU0YS1jZDNkNGE1YjIwMDMiLCJyb2xlIjoxLCJleHAiOjB9.G0PITHn6gz-fu6kqrZYwBc_bAca1YCZvMNGFvKHDytk
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
        500:
          $ref: '#/components/responses/InternalServerError'
  /auth/request-otp:
    post:
      summary: Request OTP
      operationId: requestOTP
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: a@a.com
        required: true
      responses:
        200:
          description: OTP sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: otp sent successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              examples:
                InvalidRequestBody:
                  $ref: '#/components/examples/InvalidRequestBody'
                InvalidEmail:
                  $ref: '#/components/examples/InvalidEmail'
        404:
          $ref: '#/components/responses/UserNotFound'
        429:
          description: Too many requests sent in a short period of time. OTP can be requested only once every 60 seconds
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: too many requests
                
        500:
          $ref: '#/components/responses/InternalServerError'
  /auth/verify-otp:
    post:
      summary: Verify OTP
      operationId: verifyOTP
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - code
              properties:
                email:
                  type: string
                  format: email
                  example: a@a.com
                code:
                  type: string
                  example: 123456
        required: true
      responses:
        200:
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: otp verified successfully
                  data:
                    type: object
                    properties:
                      key:
                        type: string
                        example: 12345adaasdadd6   
                  
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              examples:
                InvalidRequestBody:
                  $ref: '#/components/examples/InvalidRequestBody'
                InvalidEmail:
                  $ref: '#/components/examples/InvalidEmail'
        401:
          description: Invalid OTP
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              examples:
                InvalidOTP:
                  $ref: '#/components/examples/InvalidOTP'
        500:
          $ref: '#/components/responses/InternalServerError'
  /auth/reset-password:
    put:
      summary: Reset password
      operationId: resetPassword
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - key
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: a@a.com
                key:
                  type: string
                  example: 12345adaasdadd6
                password:
                  type: string
                  example: 123456789
        required: true
      responses:
        200:
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: password reset successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              examples:
                InvalidRequestBody:
                  $ref: '#/components/examples/InvalidRequestBody'
                InvalidEmail:
                  $ref: '#/components/examples/InvalidEmail'
                InvalidPassword:
                  $ref: '#/components/examples/InvalidPassword'
        401:
          description: Invalid OTP Token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: invalid OTP token
        404:
          $ref: '#/components/responses/UserNotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
                
  /users:
    get:
      summary: Get logged in user detail
      operationId: getUserDetail
      security:
        - access_token : []
      tags:
        - EndUser.Users
      responses:
        200:
          description: Successfully retrieved user details
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: user details retrieved successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 71858cf1-e48d-43bd-8e4a-cd3d4a5b2003
                      email:
                        type: string
                        example: of@mail.com
                      name:
                        type: string
                        example: John Doe
                      phone:
                        type: string
                        example: +1 234 567 890
                      picture:
                        type: string
                        format: uri
                        example: https://example.com/picture.jpg
                      role:
                        type: integer
                        example: 1
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
        404:
          $ref: '#/components/responses/UserNotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update logged in user details
      operationId: updateUserDetail
      security:
        - access_token: []
      tags:
        - EndUser.Users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: oz@email.com
                phone:
                  type: string
                  example: +1 234 567 890
                pictureID:
                  type: string
                  example: 5f9b9b9b9b9b9b9b9b9b9b9b
        required: true
      responses:
        200:
          description: Successfully updated user details
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: user updated successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              examples:
                InvalidRequestBody:
                  $ref: '#/components/examples/InvalidRequestBody'
                InvalidEmail:
                  $ref: '#/components/examples/InvalidEmail'
                InvalidPictureID:
                  $ref: '#/components/examples/InvalidPictureID'
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
        404:
          $ref: '#/components/responses/UserNotFound'
        409:
          $ref: '#/components/responses/EmailAlreadyUsed'
        500:
          $ref: '#/components/responses/InternalServerError'
  
  /users/picture:
    put:
      summary: Upload and change  user picture
      operationId: uploadUserPicture
      security:
        - access_token: [] 
      tags:
        - EndUser.Users
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                picture:
                  type: string
                  format: binary
        required: true
      responses:
        200:
          description: Successfully changed user picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: user avatar updated successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              examples:
                InvalidRequestBody:
                  $ref: '#/components/examples/InvalidRequestBody'
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
        404:
          $ref: '#/components/responses/UserNotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /users/change-password:
    put:
      summary: Update logged in user password
      operationId: updateUserPassword
      security:
        - access_token: []
      tags:
        - EndUser.Users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - oldPassword
                - newPassword
              properties:
                oldPassword:
                  type: string
                  format: password
                  example: password
                newPassword:
                  type: string
                  format: password
                  example: password
        required: true
      responses:
        200:
          description: Successfully updated user password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: password changed successful
        400:
          description: Bad request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              examples:
                InvalidRequestBody:
                  $ref: '#/components/examples/InvalidRequestBody'
                InvalidPassword:
                  $ref: '#/components/examples/InvalidPassword'
             
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
                
        404:
          $ref: '#/components/responses/UserNotFound'
        409:
          description: Old password is incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example:  password not match
        500:
          $ref: '#/components/responses/InternalServerError'

  /reservations:
    get:
      summary: Get all reservations for a user
      operationId: getReservations
      security:
        - access_token: []
      tags:
        - EndUser.Reservations
      responses:
        200:
          description: successfully retrieved reservations
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: reservations retrieved successfully
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: 5f9f1b9c-1b5a-4b9f-8c1a-8c1a8c1a8c1a
                        buildings:
                          type: object
                          properties:
                            id:
                              type: string
                              example: 71858cf1-e48d-43bd-8e4a-cd3d4a5b2003
                            name:
                              type: string
                              example: Jakarta Convention Center
                        companyName:
                          type: string
                          example: Alterra
                        startDate:
                          type: string
                          format: date
                          description: Start date of the reservation with format YYYY-MM-DD
                          example: 2020-01-01
                        endDate:
                          type: string
                          format: date
                          description: End date of the reservation with format YYYY-MM-DD
                          example: 2020-01-01
                        status:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            message:
                              type: string
                              example: Pending
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
        404:
          $ref: '#/components/responses/ReservationNotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a reservation
      operationId: createReservation
      security:
        - access_token: []
      tags:
        - EndUser.Reservations
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - buildingID
                - companyName
                - startDate
                - endDate
              properties:
                buildingID:
                  type: string
                  format: uuid
                  example: 71858cf1-e48d-43bd-8e4a-cd3d4a5b2003
                companyName:
                  type: string
                  example: Alterra
                startDate:
                  type: string
                  format: date
                  description: Start date of the reservation with format YYYY-MM-DD
                  example: 2020-01-01
                endDate:
                  type: string
                  format: date
                  description: End date of the reservation with format YYYY-MM-DD
                  example: 2020-01-01
        required: true
      responses:
        201:
          description: Successfully created reservation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: reservation created successfully
                  data:
                    type: object
                    properties:
                      reservationID:
                        type: string
                        format: uuid
                        example: 5f9f1b9c-1b5a-4b9f-8c1a-8c1a8c1a8c1a        
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              examples:
                InvalidRequestBody:
                  $ref: '#/components/examples/InvalidRequestBody'
                InvalidStartDate:
                  $ref: '#/components/examples/InvalidStartDate'
                InvalidEndDate:
                  $ref: '#/components/examples/InvalidEndDate'
                InvalidDateRange:
                  $ref: '#/components/examples/InvalidDateRange'
                InvalidBuildingID:
                  $ref: '#/components/examples/InvalidBuildingID'
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
        409:
          description: Reservation date range is not available
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: reservation date range is not available
        500:
          $ref: '#/components/responses/InternalServerError'

  /reservations/{reservationID}:
    delete:
      summary: Delete a reservation
      operationId: deleteReservation
      security:
        - access_token: []
      tags:
        - EndUser.Reservations
      parameters:
        - name: reservationID
          in: path
          description: ID of the reservation to be deleted
          required: true
          schema:
            type: string
            format: uuid
            example: 5f9f1b9c-1b5a-4b9f-8c1a-8c1a8c1a8c1a
      responses:
        200:
          description: Successfully deleted reservation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: reservation deleted successfully
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
        404:
          $ref: '#/components/responses/ReservationNotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /admin/buildings/id:
    get:
      summary: Get empty building ID for uploading building picture and creating building
      operationId: getEmptyBuildingID
      security:
        - access_token: []
      tags:
        - Admin.Buildings
      responses:
        200:
          description: Successfully retrieved empty building ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: building id requested successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: 71858cf1-e48d-43bd-8e4a-cd3d4a5b2003
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
        403:
          $ref: '#/components/responses/RolesNotSupported'
        500:
          $ref: '#/components/responses/InternalServerError'

  /admin/buildings:
    get:
      summary: Get all buildings in the system
      description: Get all buildings in the system with custom filters
      operationId: getBuildings
      security:
        - access_token: []
      tags:
        - Admin.Buildings
      parameters:
        - name: q
          in: query
          description: Search query string to filter buildings by name (*)
          required: false
          schema:
            type: string
            example: 'building'
        - name: city
          in: query
          description: City ID to filter buildings by city (*)
          required: false
          schema:
            type: integer
        - name: district
          in: query
          description: District ID to filter buildings by district (*)
          required: false
          schema:
            type: integer
        - name: startDate
          in: query
          description: Start date to filter buildings by availability in yyyy-mm-dd format. Must be used together with endDate
          required: false
          schema:
            type: string
            format: date
            example: '2020-01-01'
        - name: endDate
          in: query
          description: End date to filter buildings by availability in yyyy-mm-dd format. Must be used together with startDate
          required: false
          schema:
            type: string
            format: date
            example: '2020-01-01'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'

      responses:
        200:
          description: Successfully retrieved buildings
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: buildings retrieved successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BriefBuildingDetails'
                  meta:
                    $ref: '#/components/schemas/Meta'

        400:
          description: Bad parameter request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              examples:
                InvalidParameterValue:
                  description: Invalid parameter value provided
                  value:
                    message: Invalid parameter value
                ParameterRequired:
                  description: Required parameter not provided
                  value:
                    message: Parameter required
        404:
          $ref: '#/components/responses/BuildingNotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /admin/buildings/{buildingID}/pictures:
    post:
      summary: Upload a picture for a building
      operationId: uploadBuildingPicture
      security:
        - access_token: []
      tags:
        - Admin.Buildings
      parameters:
        - name: buildingID
          in: path
          description: ID of the building to be added with picture
          required: true
          schema:
            type: string
            format: uuid
            example: 71858cf1-e48d-43bd-8e4a-cd3d4a5b2003
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - picture
                - index
              properties:
                picture:
                  type: string
                  format: binary
                  description: Picture of the building
                index:
                  type: integer
                  description: Index of the picture
                alt:
                  type: string
                  description: Alternative text for the picture
        required: true
      responses:
        201:
          description: Successfully uploaded building picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: building picture uploaded successfully
                  data:
                    type: object
                    properties:
                      pictureID:
                        type: string
                        format: uuid
                        example: 5f9f1b9c-1b5a-4b9f-8c1a-8c1a8c1a8c1a
                      url:
                        type: string
                        example: https://ik.imagekit.io/fortyfour/default-image.jpg
                      alt:
                        type: string
                        example: Jakarta Convention Center
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              examples:
                InvalidRequestBody:
                  $ref: '#/components/examples/InvalidRequestBody'
                InvalidPictureIndex:
                  $ref: '#/components/examples/InvalidPictureIndex'
                InvalidPicture:
                  $ref: '#/components/examples/InvalidPicture'
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
        403:
          $ref: '#/components/responses/RolesNotSupported'
        500:
          $ref: '#/components/responses/InternalServerError'
  
  /admin/buildings/{buildingID}/facilities:
    post:
      summary: Add a facility to a building
      operationId: addBuildingFacility
      security:
        - access_token: []
      tags:
        - Admin.Buildings
      parameters:
        - name: buildingID
          in: path
          description: ID of the building to be added with facility
          required: true
          schema:
            type: string
            format: uuid
            example: 71858cf1-e48d-43bd-8e4a-cd3d4a5b2003
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                required:
                  - name
                  - iconId
                properties:
                  name:
                    type: string
                    example: Meeting Room
                  iconId:
                    type: integer
                    example: 5
                  description:
                    type: string
                    example: Meeting room with 10 seats 
        required: true
      responses:
        201:
          description: Successfully added building facility
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: building facility added successfully
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              examples:
                InvalidRequestBody:
                  $ref: '#/components/examples/InvalidRequestBody'
                InvalidFacilityName:
                  $ref: '#/components/examples/InvalidFacilityName'
                InvalidFacilityDescription:
                  $ref: '#/components/examples/InvalidFacilityDescription'
                InvalidFacilityIconID:
                  $ref: '#/components/examples/InvalidFacilityIconID'
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
        403:
          $ref: '#/components/responses/RolesNotSupported'
        500:
          $ref: '#/components/responses/InternalServerError'


  /admin/buildings/{buildingID}:
    get:
      summary: Get building detail by ID
      operationId: getBuildingByID
      tags:
        - Admin.Buildings
      security:
        - access_token: []
      parameters:
        - name: buildingID
          in: path
          description: ID of the building
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426655440000
      responses:
        200:
          description: Successfully retrieved building
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: building retrieved successfully
                  data:
                    $ref: '#/components/schemas/BuildingDetails'
        404:
          $ref: '#/components/responses/BuildingNotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update a building
      operationId: updateBuilding
      security:
        - access_token: []
      tags:
        - Admin.Buildings
      parameters:
        - name: buildingID
          in: path
          description: ID of the building to be updated
          required: true
          schema:
            type: string
            format: uuid
            example: 5f9f1b9c-1b5a-4b9f-8c1a-8c1a8c1a8c1a
      requestBody:
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              properties:
                name:
                  type: string
                  example: Jakarta Convention Center
                facilities:
                  type: array
                  items:
                    type: object
                    required:
                    - facilityId
                    properties:
                      facilityId:
                        type: integer
                        example: 5
                      name:
                        type: string
                        example: Meeting Room
                      iconId:
                        type: integer
                        example: 5
                      description:
                        type: string
                        example: Meeting room with 10 seats
                pictures:
                  type: array
                  items:
                    type: object
                    required:
                    - pictureId
                    properties:
                      pictureId:
                        type: string
                        example: 6asjfakjdshkasd
                      index:
                        type: integer
                        example: 5
                      alt:
                        type: string
                        example: Jakarta Convention Center
                description:
                  type: string
                  example: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
                capacity:
                  type: integer
                  example: 1000
                price:
                  type: object
                  minProperties: 1
                  properties:
                    annual:
                      type: integer
                      example: 100000000
                    monthly:
                      type: integer
                      example: 10000000
                location:
                  type: object
                  minProperties: 1
                  properties:
                    districtID:
                      type: integer
                      example: 1
                    cityID:
                      type: integer
                      example: 1
                    address:
                      type: string
                      example: Jl. MH Thamrin No. 1, RT.1/RW.2, Gondangdia, Menteng, Kota Jakarta Pusat, Daerah Khusus Ibukota Jakarta 10340
                    geo:
                      type: object
                      minProperties: 1
                      properties:
                        lat:
                          type: number
                          example: -6.175392
                        long:
                          type: number
                          example: 106.827153
                isPublished:
                  type: boolean
                  description: Set to true to publish the building, only published building will be shown in the app. And to publish the building, the building must have at least 1 picture, 1 facility and all required fields must be filled.
                  example: true
        required: true
      responses:
        200:
          description: Successfully updated building
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: building updated successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              examples:
                InvalidDistrictID:
                  $ref: '#/components/examples/InvalidDistrictID'
                InvalidCityID:
                  $ref: '#/components/examples/InvalidCityID'
                InvalidFacilityCategory:
                  $ref: '#/components/examples/InvalidFacilityIconID'
                InvalidPictureIndex:
                  $ref: '#/components/examples/InvalidPictureIndex'
                InvalidFacilityName:
                  $ref: '#/components/examples/InvalidFacilityName'
                InvalidFacilityDescription:
                  $ref: '#/components/examples/InvalidFacilityDescription'
                InvalidFacilityIconID:
                  $ref: '#/components/examples/InvalidFacilityIconID'
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
        403:
          $ref: '#/components/responses/RolesNotSupported'
        404:
          $ref: '#/components/responses/BuildingNotFound'
        409:
          description: Conflict resource, for trying to publish non valid building
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: building is not valid, please check the required fields
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        field:
                          type: string
                          example: name
                        reason:
                          type: string
                          example: name is required

        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete a building
      operationId: deleteBuilding
      security:
        - access_token: []
      tags:
        - Admin.Buildings
      parameters:
        - name: buildingID
          in: path
          description: ID of the building to be deleted
          required: true
          schema:
            type: string
            format: uuid
            example: 5f9f1b9c-1b5a-4b9f-8c1a-8c1a8c1a8c1a
      responses:
        200:
          description: Successfully deleted building
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: building deleted successfully
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
        403:
          $ref: '#/components/responses/RolesNotSupported'
        404:
          $ref: '#/components/responses/BuildingNotFound'
        409:
          description: Conflict resource, for trying to delete building that has been booked
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: building has active reservation
        500:
          $ref: '#/components/responses/InternalServerError'

  /admin/buildings/{buildingID}/pictures/{pictureID}:
    delete:
      summary: Delete a picture from a building
      operationId: deleteBuildingPicture
      security:
        - access_token: []
      tags:
        - Admin.Buildings
      parameters:
        - name: buildingID
          in: path
          description: ID of the building to be deleted
          required: true
          schema:
            type: string
            format: uuid
            example: 5f9f1b9c-1b5a-4b9f-8c1a-8c1a8c1a8c1a
        - name: pictureID
          in: path
          description: ID of the picture to be deleted
          required: true
          schema:
            type: string
            example: 6asjfakjdshkasd
      responses:
        200:
          description: Successfully deleted picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: building picture deleted successfully
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
        403:
          $ref: '#/components/responses/RolesNotSupported'
        404:
          $ref: '#/components/responses/PictureNotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /admin/buildings/{buildingID}/facilities/{facilityID}:
    delete:
      summary: Delete a facility from a building
      operationId: deleteBuildingFacility
      security:
        - access_token: []
      tags:
        - Admin.Buildings
      parameters:
        - name: buildingID
          in: path
          description: ID of the building to be deleted
          required: true
          schema:
            type: string
            format: uuid
            example: 5f9f1b9c-1b5a-4b9f-8c1a-8c1a8c1a8c1a
        - name: facilityID
          in: path
          description: ID of the facility to be deleted
          required: true
          schema:
            type: integer
            example: 6
      responses:
        200:
          description: Successfully deleted facility
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: building facility deleted successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: facility id is invalid
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
        403:
          $ref: '#/components/responses/RolesNotSupported'
        404:
          $ref: '#/components/responses/FacilityNotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /admin/reservations:
    get:
      summary: Get all reservations
      operationId: getReservations
      security:
        - access_token: []
      tags:
        - Admin.Reservations
      parameters:
        - name: status
          in: query
          description: Status of the reservation
          required: false
          schema:
            type: string
            enum:
              - pending
              - payment
              - approved
              - rejected
              - cancelled
              - finished
              - null
            description: >
              status of the reservation
              * `pending` - reservation is waiting for manual approval from admin
              * `payment` - reservation is waiting for payment
              * `approved` - reservation is approved
              * `rejected` - reservation is rejected
              * `cancelled` - reservation is cancelled
              * `finished` - reservation is finished
            
        - name: buildingID
          in: query
          description: ID of the building that the reservation is made for
          required: false
          schema:
            type: string
            format: uuid
        - name: userID
          in: query
          description: ID of the user
          required: false
          schema:
            type: string
            format: uuid
        - name: userName
          in: query
          description: Name of the user
          required: false
          schema:
            type: string
        - name: startDate
          in: query
          description: Start date of the reservation
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: End date of the reservation
          required: false
          schema:
            type: string
            format: date
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        200:
          description: Successfully retrieved reservations
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: reservations retrieved successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BriefReservationDetails'
                  meta:
                    $ref: '#/components/schemas/Meta'
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
        403:
          $ref: '#/components/responses/RolesNotSupported'
        404:
          $ref: '#/components/responses/ReservationNotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a reservation
      operationId: createReservation
      security:
        - access_token: []
      tags:
        - Admin.Reservations 
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - userID
                - buildingID
                - companyName
                - startDate
                - endDate
              properties:
                userID:
                  type: string
                  description: ID of the user that made the reservation
                  format: uuid
                  example: 5f9f1b9c-1b5a-4b9f-8c1a-8c1a8c1a8c1a
                buildingID:
                  type: string
                  format: uuid
                  example: 71858cf1-e48d-43bd-8e4a-cd3d4a5b2003
                companyName:
                  type: string
                  example: Alterra
                startDate:
                  type: string
                  format: date
                  description: Start date of the reservation with format YYYY-MM-DD
                  example: 2020-01-01
                endDate:
                  type: string
                  format: date
                  description: End date of the reservation with format YYYY-MM-DD
                  example: 2020-01-01
        required: true
      responses:
        201:
          description: Successfully created reservation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: reservation created successfully
                  data:
                    type: object
                    properties:
                      reservationID:
                        type: string
                        format: uuid
                        example: 5f9f1b9c-1b5a-4b9f-8c1a-8c1a8c1a8c1a
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              examples:
                InvalidRequestBody:
                  $ref: '#/components/examples/InvalidRequestBody'
                InvalidStartDate:
                  $ref: '#/components/examples/InvalidStartDate'
                InvalidEndDate:
                  $ref: '#/components/examples/InvalidEndDate'
                InvalidDateRange:
                  $ref: '#/components/examples/InvalidDateRange'
                InvalidBuildingID:
                  $ref: '#/components/examples/InvalidBuildingID'
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
        403:
          $ref: '#/components/responses/RolesNotSupported'
        409:
          description: Reservation date range is not available
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: reservation date range is not available
        500:
          $ref: '#/components/responses/InternalServerError'    
  /admin/reservations/{reservationID}:
    put:
      summary: Update a reservation
      operationId: updateReservation
      security:
        - access_token: []
      tags:
        - Admin.Reservations
      parameters:
        - name: reservationID
          in: path
          description: ID of the reservation
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              properties:
                companyName:
                  type: string
                  example: Alterra
                buildingID:
                  type: string
                  format: uuid
                  example: 71858cf1-e48d-43bd-8e4a-cd3d4a5b2003
                startDate:
                  type: string
                  format: date
                  description: Start date of the reservation with format YYYY-MM-DD
                  example: 2020-01-01
                endDate:
                  type: string
                  format: date
                  description: End date of the reservation with format YYYY-MM-DD
                  example: 2020-01-01
                status:
                  type: string
                  enum:
                    - pending
                    - payment
                    - approved
                    - rejected
                    - cancelled
                    - finished
                    - null
                  description: >
                    status of the reservation
                    * `pending` - reservation is waiting for manual approval from admin
                    * `payment` - reservation is waiting for payment
                    * `approved` - reservation is approved
                    * `rejected` - reservation is rejected
                    * `cancelled` - reservation is cancelled
                    * `finished` - reservation is finished
                message:
                  type: string
                  description: Message from admin to user
                  example: Your reservation is approved
        required: true
      responses:
        200:
          description: Successfully updated reservation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: reservation updated successfully
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              examples:
                InvalidRequestBody:
                  $ref: '#/components/examples/InvalidRequestBody'
                InvalidStartDate:
                  $ref: '#/components/examples/InvalidStartDate'
                InvalidEndDate:
                  $ref: '#/components/examples/InvalidEndDate'
                InvalidDateRange:
                  $ref: '#/components/examples/InvalidDateRange'
                InvalidBuildingID:
                  $ref: '#/components/examples/InvalidBuildingID'
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
        403:
          $ref: '#/components/responses/RolesNotSupported'
        404:
          $ref: '#/components/responses/ReservationNotFound'
        409:
          description: Reservation date range is not available
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: reservation date range is not available
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete a reservation
      operationId: deleteReservation
      security:
        - access_token: []
      tags:
        - Admin.Reservations
      parameters:
        - name: reservationID
          in: path
          description: ID of the reservation
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Successfully deleted reservation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: reservation deleted successfully
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
        403:
          $ref: '#/components/responses/RolesNotSupported'
        404:
          $ref: '#/components/responses/ReservationNotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
  /admin/reservations/total:
    get:
      summary: Get total number of reservations
      operationId: getTotalReservations
      security:
        - access_token: []
      tags:
        - Admin.Reservations
      responses:
        200:
          description: Successfully get total number of reservations
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: reservations total retrieved successfully
                  data:
                    type: object
                    properties:
                      pending:
                        type: integer
                        example: 1
                      payment:
                        type: integer
                        example: 1
                      approved:
                        type: integer
                        example: 1
                      rejected:
                        type: integer
                        example: 1
                      cancelled:
                        type: integer
                        example: 1
                      monthly:
                        type: integer
                        example: 1
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
        403:
          $ref: '#/components/responses/RolesNotSupported'
        500:
          $ref: '#/components/responses/InternalServerError'
  /admin/reservations/statistic:
    get:
      summary: Get weekly statistic of reservations 
      operationId: getReservationStatistic
      security:
        - access_token: []
      tags:
        - Admin.Reservations
      responses:
        200:
          description: Successfully get statistic of reservations
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: reservations statistic retrieved successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ReservationsStat'
                    example:
                      - date: 2020-01-01
                        total: 1
                      - date: 2020-01-02
                        total: 1
                      - date: 2020-01-03
                        total: 1
                      - date: 2020-01-04
                        total: 1
                      - date: 2020-01-05
                        total: 1
                      - date: 2020-01-06
                        total: 1
                      - date: 2020-01-07
                        total: 1
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
        403:
          $ref: '#/components/responses/RolesNotSupported'
        500:
          $ref: '#/components/responses/InternalServerError'
  /admin/users:
    get:
      summary: Get all users
      operationId: getAllUsers
      security:
        - access_token: []
      tags:
        - Admin.Users
      parameters:
        - name : role
          in: query
          description: role of the user
          required: true
          schema:
            type: integer
            example: 1
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of users per page
          required: false
          schema:
            type: integer
            example: 10
        - name: q
          in: query
          description: Search user by name 
          required: false
          schema:
            type: string
            example: John
      responses:
        200:
          description: Successfully get all users
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: users retrieved successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BriefUserDetails'
                  meta:
                    $ref: '#/components/schemas/Meta'
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
        403:
          $ref: '#/components/responses/RolesNotSupported'
        500:
          $ref: '#/components/responses/InternalServerError'

  /admin/users/new-user:
    post:
      summary: Register a new user
      operationId: registerUserfromAdmin
      tags:
        - Admin.Users
      security:
        - access_token: []
      requestBody:
        description: User registration details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: oz@mail.com
                password:
                  type: string
                  format: password
                  example: password
                phone:
                  type: string
                  example: +1 234 567 890
      responses:
        201:
          description: Successfully registering a new user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: user created successfully
                  data:
                    type: object
                    properties:
                      uid:
                        type: string
                        example: 5f7f9c9c-8b9a-4b9c-9c9c-8b9a4b9c9c9c
        409:
          $ref: '#/components/responses/EmailAlreadyUsed'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              examples:
                InvalidRequestBody:
                  $ref: '#/components/examples/InvalidRequestBody'
                InvalidEmail:
                  $ref: '#/components/examples/InvalidEmail'
                InvalidPassword:
                  $ref: '#/components/examples/InvalidPassword'
        500:
          $ref: '#/components/responses/InternalServerError'

  /admin/users/new-admin:
    post:
      summary: Register a new admin
      operationId: registerAdminfromAdmin
      tags:
        - Admin.Users
      security:
        - access_token: []
      requestBody:
        description: Admin registration details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: oz@mail.com
                password:
                  type: string
                  format: password
                  example: password
                phone:
                  type: string
                  example: +1 234 567 890
      responses:
        201:
          description: Successfully registering a new admin
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: admin created successfully
                  data:
                    type: object
                    properties:
                      uid:
                        type: string
                        example: 5f7f9c9c-8b9a-4b9c-9c9c-8b9a4b9c9c9c
        409:
          $ref: '#/components/responses/EmailAlreadyUsed'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              examples:
                InvalidRequestBody:
                  $ref: '#/components/examples/InvalidRequestBody'
                InvalidEmail:
                  $ref: '#/components/examples/InvalidEmail'
                InvalidPassword:
                  $ref: '#/components/examples/InvalidPassword'
        500:
          $ref: '#/components/responses/InternalServerError'

  /admin/users/{userID}:
    get:
      summary: Get user by ID
      operationId: getUserByID
      security:
        - access_token: []
      tags:
        - Admin.Users
      parameters:
        - name: userID
          in: path
          description: ID of the user
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Successfully get user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: user retrieved successfully
                  data:
                    $ref: '#/components/schemas/UserDetail'
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
        403:
          $ref: '#/components/responses/RolesNotSupported'
        404:
          $ref: '#/components/responses/UserNotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update user by ID
      operationId: updateUserByID
      security:
        - access_token: []
      tags:
        - Admin.Users
      parameters:
        - name: userID
          in: path
          description: ID of the user
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: User object that needs to be updated
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  format: email
                  example: oz@mail.com
                phone: 
                  type: string
                  example: 0123456789
                pictureID:
                  type: string
                  example: 1a2b3c4d-5e6f-7g8h-9i0j-1k2l3m4n5o6p
                role:
                  type: integer
                  enum:
                    - 1
                    - 2
                  description: 1 for user, 2 for admin
                  example: 1
        required: true
      responses:
        200:
          description: Successfully updated user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: user updated successfully
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              examples:
                InvalidRequestBody:
                  $ref: '#/components/examples/InvalidRequestBody'
                InvalidEmail:
                  $ref: '#/components/examples/InvalidEmail'
                InvalidRole:
                  value:
                    message: invalid role
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
        403:
          $ref: '#/components/responses/RolesNotSupported'
        404:
          $ref: '#/components/responses/UserNotFound'
        409:
          $ref: '#/components/responses/EmailAlreadyUsed'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete user by ID
      operationId: deleteUserByID
      security:
        - access_token: []
      tags:
        - Admin.Users
      parameters:
        - name: userID
          in: path
          description: ID of the user
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Successfully deleted user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: user deleted successfully
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
        403:
          $ref: '#/components/responses/RolesNotSupported'
        404:
          $ref: '#/components/responses/UserNotFound'
        409:
          description: User has active reservations with status "pending", "accepted", "awaiting payment" or "active"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              example:
                message: user has active reservation

        500:
          $ref: '#/components/responses/InternalServerError'

  /admin/users/{userID}/picture:
    put:
      summary: Upload and change another user avatar
      operationId: uploadAnotherUserPicture
      security:
        - access_token: [ ]
      tags:
        - Admin.Users
      parameters:
        - name: userID
          in: path
          description: ID of the user
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                picture:
                  type: string
                  format: binary
        required: true
      responses:
        200:
          description: Successfully changed user picture
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: user avatar updated successfully
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              examples:
                InvalidRequestBody:
                  $ref: '#/components/examples/InvalidRequestBody'
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
        404:
          $ref: '#/components/responses/UserNotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
  /admin/payments/logo:
    post:
      summary: Upload logo for payment
      operationId: uploadPaymentLogo
      security:
        - access_token: []
      tags:
        - Admin.Payments
      requestBody:
        description: Logo for payment
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - logo
              properties:
                logo:
                  type: string
                  format: binary
                alt:
                  type: string
                  example: logo BRI
        required: true
      responses:
        201:
          description: Successfully uploaded logo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: logo uploaded successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: 1a2b3c4d-5e6f-7g8h-9i0j-1k2l3m4n5o6p
                      url:
                        type: string
                        example: https://ik.imagekit.io/fortyfour/default-image.jpg
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              examples:
                InvalidRequestBody:
                  $ref: '#/components/examples/InvalidRequestBody'
                InvalidLogo:
                  value:
                    message: invalid logo
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
        403:
          $ref: '#/components/responses/RolesNotSupported'
        500:
          $ref: '#/components/responses/InternalServerError'

  /admin/payments:
    post:
      summary: Create payment detail
      operationId: createPayment
      security:
        - access_token: []
      tags:
        - Admin.Payments
      requestBody:
        description: Payment object that needs to be added
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - logo
                - accountNumber
                - description
              properties:
                name:
                  type: string
                  example: BRI
                logoID:
                  type: string
                  example: 1a2b3c4d-5e6f-7g8h-9i0j-1k2l3m4n5o6p
                accountNumber:
                  type: string
                  example: 1234567890
                description:
                  type: string
                  example: Silahkan transfer ke rekening ini
        required: true
      responses:
        201:
          description: Successfully created payment
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: payment created successfully
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              examples:
                InvalidRequestBody:
                  $ref: '#/components/examples/InvalidRequestBody'
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
        403:
          $ref: '#/components/responses/RolesNotSupported'
        500:
          $ref: '#/components/responses/InternalServerError'

  /admin/payments/{paymentID}:
    put:
      summary: Update payment detail by ID
      operationId: updatePaymentByID
      security:
        - access_token: []
      tags:
        - Admin.Payments
      parameters:
        - name: paymentID
          in: path
          description: ID of the payment
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Payment object that needs to be updated
        content:
          application/json:
            schema:
              type: object
              minProperties: 1
              properties:
                name:
                  type: string
                  example: BRI
                logoID:
                  type: integer
                  example: 1
                accountNumber:
                  type: string
                  example: 1234567890
                description:
                  type: string
                  example: Silahkan transfer ke rekening ini
        required: true
      responses:
        200:
          description: Successfully updated payment
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: payment updated successfully
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              examples:
                InvalidRequestBody:
                  $ref: '#/components/examples/InvalidRequestBody'
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
        403:
          $ref: '#/components/responses/RolesNotSupported'
        404:
          $ref: '#/components/responses/PaymentNotFound'
        500: 
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete payment detail by ID
      operationId: deletePaymentByID
      security:
        - access_token: []
      tags:
        - Admin.Payments
      parameters:
        - name: paymentID
          in: path
          description: ID of the payment
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Successfully deleted payment
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: payment deleted successfully
        401:
          $ref: '#/components/responses/InvalidOrMissingToken'
        403:
          $ref: '#/components/responses/RolesNotSupported'
        404:
          $ref: '#/components/responses/PaymentNotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /buildings:
    get:
      summary: Get all published buildings in the system
      description: Get all buildings in the system with custom filters.
      operationId: getPublishedBuildings
      tags:
        - Buildings
      parameters:
        - name: q
          in: query
          description: Search query string to filter buildings by name (*)
          required: false
          schema:
            type: string
            example: 'building'
        - name: city
          in: query
          description: City ID to filter buildings by city (*)
          required: false
          schema:
            type: integer
        - name: district
          in: query
          description: District ID to filter buildings by district (*)
          required: false
          schema:
            type: integer
        - name: startDate
          in: query
          description: Start date to filter buildings by availability in yyyy-mm-dd format. Must be used together with endDate
          required: false
          schema:
            type: string
            format: date
            example: '2020-01-01'
        - name: endDate
          in: query
          description: End date to filter buildings by availability in yyyy-mm-dd format. Must be used together with startDate
          required: false
          schema:
            type: string
            format: date
            example: '2020-01-01'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/page'

      responses:
        200:
          description: Successfully retrieved buildings
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: buildings retrieved successfully
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/BriefPublishedBuildingDetails'
                  meta:
                    $ref: '#/components/schemas/Meta'

        400:
          description: Bad parameter request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
              examples:
                InvalidParameterValue:
                  description: Invalid parameter value provided
                  value:
                    message: Invalid parameter value
                ParameterRequired:
                  description: Required parameter not provided
                  value:
                    message: Parameter required
        404:
          $ref: '#/components/responses/BuildingNotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
  /buildings/{buildingID}:
    get:
      summary: Get published building detail by ID
      operationId: getPublishedBuildingByID
      tags:
        - Buildings
      parameters:
        - name: buildingID
          in: path
          description: ID of the building
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426655440000
      responses:
        200:
          description: Successfully retrieved building
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: building retrieved successfully
                  data:
                    $ref: '#/components/schemas/PublishedBuildingDetails'
        404:
          $ref: '#/components/responses/BuildingNotFound'
        500:
          $ref: '#/components/responses/InternalServerError'
  /buildings/faclities/category:
    get:
      summary: Get all building facilities categories
      operationId: getBuildingFacilitiesCategories
      tags:
        - Buildings
      responses:
        200:
          description: Successfully retrieved building facilities categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: facility categories fetched successfully
                  data:
                    type: array
                    items: 
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: kamar-mandi
                        url:
                          type: string
                          example: https://ik.imagekit.io/fortyfour/default-image.jpg
                      
        500:
          $ref: '#/components/responses/InternalServerError'

  /payments:
    get:
      summary: Get all payments in the system
      operationId: getPayments
      tags:
        - Payments
      responses:
        200:
          description: Successfully retrieved payments
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: payments retrieved successfully
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: Bank Transfer
                        logo:
                          type: string
                          example: https://ik.imagekit.io/fortyfour/default-image.jpg
                        accountNumber:
                          type: string
                          example: 1234567890
                        description:
                          type: string
                          example: Bank Transfer
                  meta:
                    $ref: '#/components/schemas/Meta'
        
        500:
          $ref: '#/components/responses/InternalServerError'


components:
  responses:
    EmailAlreadyUsed:
      description: User with provided email already exists
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: email already used
    ReservationNotFound:
      description: Not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: reservation not found
    UserNotFound:
      description: Not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: user not found
    BuildingNotFound:
      description: Not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: building not found
    PaymentNotFound:
      description: Not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: payment not found
    PictureNotFound:
      description: Not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: picture not found
    InvalidOrMissingToken:
      description: Invalid or expired JWT
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: invalid or expired JWT
    RolesNotSupported:
      description: Role not supported for this endpoint, e.g. user role trying to access admin endpoints
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: you don't have permission to perform the action
    InternalServerError:
      description: Unexpected error occurred
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Error message
                example: database error....

  parameters:
    page:
      name: page
      in: query
      description: Page number
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    limit:
      name: limit
      in: query
      description: Number of items to return
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

  schemas:
    BaseResponse:
      type: object
      properties:
        message:
          type: string
    Meta:
      type: object
      properties:
        total:
          type: integer
          example: 1
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
    BriefPublishedBuildingDetails:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 7e4b5c6d-8f9a-4a93-9b0b-c1d2e3f4g5h6
        name:
          type: string
          example: Jakarta Convention Center
        picture:
          type: string
          example: https://ik.imagekit.io/fortyfour/default-image.jpg
        price:
          type: object
          properties:
            annual:
              type: integer
              example: 12000000
            monthly:
              type: integer
              example: 1000000
        owner:
          type: string
          example: PT. Graha Sidang Pratama
        location:
          type: object
          properties:
            city:
              type: string
              example: Jakarta Selatan
            district:
              type: string
              example: Tanah Abang
    BriefBuildingDetails:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 7e4b5c6d-8f9a-4a93-9b0b-c1d2e3f4g5h6
        name:
          type: string
          example: Jakarta Convention Center
        picture:
          type: string
          example: https://ik.imagekit.io/fortyfour/default-image.jpg
        price:
          type: object
          properties:
            annual:
              type: integer
              example: 12000000
            monthly:
              type: integer
              example: 1000000
        owner:
          type: string
          example: PT. Graha Sidang Pratama
        location:
          type: object
          properties:
            city:
              type: string
              example: Jakarta Selatan
            district:
              type: string
              example: Tanah Abang
        isPublished:
          type: boolean
          example: true
    PublishedBuildingDetails:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 7e4b5c6d-8f9a-4a93-9b0b-c1d2e3f4g5h6
        name:
          type: string
          example: Jakarta Convention Center
        pictures:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
                example: 7e4b5c6d-8f9a-4a93-9b0b-c1d2e3f4g5h6
              index:
                type: integer
                example: 1
              url:
                type: string
                example: https://ik.imagekit.io/fortyfour/default-image.jpg
              alt:
                type: string
                example: Jakarta Convention Center
        description:
          type: string
          example: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas quis bibendum ipsum. Maecenas in ante at velit rhoncus facilisis vel lacinia turpis. Fusce blandit ac augue a tincidunt. Pellentesque tristique augue rhoncus tortor dapibus vulputate condimentum in dolor. Aenean imperdiet augue eu facilisis luctus. Vivamus pretium in mauris sed interdum. Pellentesque cursus sem eget turpis tempus, nec ultrices elit porta.
        facilities:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: Meeting Room
              icon:
                type: string
                example: https://ik.imagekit.io/fortyfour/default-image.jpg
              iconName:
                type: string
                example: meeting-room
              description:
                type: string
                example: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas quis bibendum ipsum. 
        capacity:
          type: integer
          example: 1000
        price:
          type: object
          properties:
            annual:
              type: integer
              example: 12000000
            monthly:
              type: integer
              example: 1000000
        owner:
          type: string
          example: PT. Graha Sidang Pratama
        location:
          type: object
          properties:
            address:
              type: string
              example: Jl. Jend. Sudirman Kav. 1
            city:
              type: string
              example: Jakarta Selatan
            district:
              type: string
              example: Tanah Abang
            geo:
              type: object
              properties:
                lat:
                  type: number
                  example: -6.1753924
                long:
                  type: number
                  example: 106.827153
    BuildingDetails:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 7e4b5c6d-8f9a-4a93-9b0b-c1d2e3f4g5h6
        name:
          type: string
          example: Jakarta Convention Center
        pictures:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
                example: 7e4b5c6d-8f9a-4a93-9b0b-c1d2e3f4g5h6
              index:
                type: integer
                example: 1
              url:
                type: string
                example: https://ik.imagekit.io/fortyfour/default-image.jpg
              alt:
                type: string
                example: Jakarta Convention Center
        description:
          type: string
          example: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas quis bibendum ipsum. Maecenas in ante at velit rhoncus facilisis vel lacinia turpis. Fusce blandit ac augue a tincidunt. Pellentesque tristique augue rhoncus tortor dapibus vulputate condimentum in dolor. Aenean imperdiet augue eu facilisis luctus. Vivamus pretium in mauris sed interdum. Pellentesque cursus sem eget turpis tempus, nec ultrices elit porta.
        facilities:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: Meeting Room
              icon:
                type: string
                example: https://ik.imagekit.io/fortyfour/default-image.jpg
              iconName:
                type: string
                example: meeting-room
              description:
                type: string
                example: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas quis bibendum ipsum.
        capacity:
          type: integer
          example: 1000
        price:
          type: object
          properties:
            annual:
              type: integer
              example: 12000000
            monthly:
              type: integer
              example: 1000000
        owner:
          type: string
          example: PT. Graha Sidang Pratama
        location:
          type: object
          properties:
            address:
              type: string
              example: Jl. Jend. Sudirman Kav. 1
            city:
              type: string
              example: Jakarta Selatan
            district:
              type: string
              example: Tanah Abang
            geo:
              type: object
              properties:
                lat:
                  type: number
                  example: -6.1753924
                long:
                  type: number
                  example: 106.827153
        isPublished:
          type: boolean
          example: true

    ReservationsStat:
      type: object
      properties:
        date:
          type: string
          format: date
        total:
          type: integer
    BriefReservationDetails:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 7e4b5c6d-8f9a-4a93-9b0b-c1d2e3f4g5h6
        building:
          type: object
          properties:
            id:
              type: string
              format: uuid
              example: 7e4b5c6d-8f9a-4a93-9b0b-c1d2e3f4g5h6
            name:
              type: string
              example: Jakarta Convention Center
        tenant:
          type: object
          properties:
            id:
              type: string
              format: uuid
              example: 7e4b5c6d-8f9a-4a93-9b0b-c1d2e3f4g5h6
            name:
              type: string
              example: PT. Graha Sidang Pratama
        startDate:
          type: string
          format: date
          example: 2020-01-01
        endDate:
          type: string
          format: date
          example: 2020-01-01
        status:
          type: string
          example: pending
        message:
          type: string
          example: Please contact me for further details
    BriefUserDetails:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 7e4b5c6d-8f9a-4a93-9b0b-c1d2e3f4g5h6
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: oz@email.com
        phone:
          type: string
          example: 081234567890
        picture:
          type: string
          format: url
          example: https://ik.imagekit.io/fortyfour/default-image.jpg
    UserDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 7e4b5c6d-8f9a-4a93-9b0b-c1d2e3f4g5h6
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: oz@email.com
        phone:
          type: string
          example: 081234567890
        picture:
          type: object
          properties:
            id:
              type: string
              example: 7e4b5c6d-8f9a-4a93-9b0b-c1d2e3f4g5h6
            url:
              type: string
              example: https://ik.imagekit.io/fortyfour/default-image.jpg
        role:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: admin
        
  
  examples:
    InvalidOrMissingToken:
      value:
        message: invalid or expired JWT
    InvalidRequestBody:
      description: Invalid request body due to either syntactically incorrect or confrom to the schema (e.g. missing required fields)
      value:
        message: invalid request body
    InvalidEmail:
      description: Invalid email format
      value:
        message: invalid request body
        data:
          - field: email
            message: must be email
    InvalidPassword:
      description: invalid request body
      value:
        message: invalid password format
        data:
          - field: password
            message: must be at least 8 characters
    InvalidOTP:
      description: invalid OTP, either expired or not found
      value:
        message: invalid OTP

    InvalidPictureID:
      description: picture id is invalid either because it is not a valid uuid or it does not exist in the database
      value:
        message: invalid picture id
    InvalidDistrictID:
      description: district id is invalid either because it is not a valid id or it does not exist in the database
      value:
        message: district id is invalid
    InvalidCityID:
      description: city id is invalid either because it is not a valid id or it does not exist in the database
      value:
        message: city id is invalid
    InvalidBuildingID:
      description: building id is invalid either because it is not a valid id or it does not exist in the database
      value:
        message: building id is invalid
    InvalidStartDate:
      description: Start date is in invalid format
      value:
        message: invalid start date
    InvalidEndDate:
      description: End date is in invalid format
      value:
        message: invalid end date
    InvalidDateRange:
      description: End date is before start date
      value:
        message: invalid date range
    InvalidPictureIndex:
      description: Invalid picture index
      value:
        message: invalid request body
        data:
          - field: index
            message: must be greater than or equal to 0
    InvalidPicture:
      description: Invalid picture
      value:
        message: invalid request body
        data:
          - field: picture
            message: must be a valid picture
    InvalidFacilityDescription:
      description: Invalid facility description
      value:
        message: invalid request body
        data:
          - field: description
            message: must be at least 3 characters
    InvalidFacilityName:
      description: Invalid facility name
      value:
        message: invalid request body
        data:
          - field: name
            message: must be at least 3 characters
    InvalidFacilityIconID:
      description: Invalid facility icon id
      value:
        message: invalid facility icon id
        
  securitySchemes:
    access_token:
      type: http
      scheme: bearer
      bearerFormat: JWT
    refresh_token:
      type: http
      scheme: bearer
      bearerFormat: JWT

tags:
  - name: Auth
    description: Authentication
  - name: EndUser.Users
    description: End user users related endpoints
  - name: EndUser.Reservations
    description: End user reservations related endpoints
  - name: Admin.Users
    description: Users related endpoints for admin only
  - name: Admin.Buildings
    description: Buildings related endpoints for admin only
  - name: Admin.Reservations
    description: Reservations related endpoints for admin only
  - name: Admin.Payments
    description: Payments related endpoints for admin only
  - name: Buildings
    description: Buildings related endpoints
  - name: Payments
    description: Payments related endpoints
